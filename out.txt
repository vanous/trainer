diff --git a/Makefile b/Makefile
index 08f1de7..90e4f5f 100644
--- a/Makefile
+++ b/Makefile
@@ -4,16 +4,38 @@ CCFLAGS += -O2
 
 LIBS += -lncurses -lartnet
 
-trainer:
-	$(CC) trainer.c $(CCFLAGS) $(LIBS) -o $@
+make_dir:
+	mkdir ./bin
+	mkdir ./release
 
-win32:
-	i686-w64-mingw32-gcc -O2 -v trainer.c -o trainer_w32.exe -std=gnu11 -I /home/vanous/bin/projects/c/win/win32/include/artnet/ -I /home/vanous/bin/projects/c/win/win32/include/ncurses/ /home/vanous/bin/projects/c/win/win32/lib/libartnet.a  /home/vanous/bin/projects/c/win/win32/lib/libncurses.a
+trainer: make_dir
+	$(CC) trainer.c $(CCFLAGS) $(LIBS) -o ./bin/$@
 
-win64:
-	x86_64-w64-mingw32-gcc -O2 -v trainer.c -o trainer_w64.exe -std=gnu11 -I /home/vanous/bin/projects/c/win/win64/include/artnet/ -I /home/vanous/bin/projects/c/win/win64/include/ncurses/ /home/vanous/bin/projects/c/win/win64/lib/libartnet.a /home/vanous/bin/projects/c/win/win64/lib/libncurses.a
+trainer-static: make_dir
+	$(CC) trainer.c $(CCFLAGS) -lncurses /lib/libartnet.a -o ./bin/$@
+
+win32: make_dir
+	i686-w64-mingw32-gcc -O2 -v trainer.c -o ./bin/trainer_w32.exe -std=gnu11 -static -mwindows -I /home/vanous/bin/projects/c/win/win32/include/artnet/ -I /home/vanous/bin/projects/c/win/win32/include/ncurses/ /home/vanous/bin/projects/c/win/win32/lib/libartnet.dll.a  /home/vanous/bin/projects/c/win/win32/lib/libncurses.a
+
+win64: make_dir
+	x86_64-w64-mingw32-gcc -O2 -v trainer.c -o ./bin/trainer_w64.exe -std=gnu11 -static -mwindows -I /home/vanous/bin/projects/c/win/win64/include/artnet/ -I /home/vanous/bin/projects/c/win/win64/include/ncurses/ /home/vanous/bin/projects/c/win/win64/lib/libartnet.dll.a /home/vanous/bin/projects/c/win/win64/lib/libncurses.a
+
+osx: make_dir
+	gcc trainer.c -lncurses -I../libs/include/artnet/ ../libs/lib/libartnet.a -o ./bin/trainer-osx
 
 clean:
-	rm -f .*.o .*.d trainer trainer_w64.exe trainer_w32.exe
+	rm -f .*.o .*.d 
+	rm -rf ./bin
+	rm -rf ./release
+
+
+all: clean trainer trainer-static win32 win64 
+
+package_osx:
+	gzip ./bin/trainer.osx > ./release/trainer-osx.gz
 
-all: clean trainer win32 win64
+package_all: all
+	gzip < ./bin/trainer > ./release/trainer.gz
+	gzip < ./bin/trainer-static > ./release/trainer-static.gz
+	zip --junk-paths ./release/trainer-w32.zip /home/vanous/bin/projects/c/win/win32/bin/libartnet-1.dll ./bin/trainer_w32.exe
+	zip --junk-paths ./release/trainer-w64.zip /home/vanous/bin/projects/c/win/win64/bin/libartnet-1.dll ./bin/trainer_w64.exe
diff --git a/README.md b/README.md
index 52e86a0..92df311 100644
--- a/README.md
+++ b/README.md
@@ -6,21 +6,21 @@ It requires libartnet but in reality, calibration can only happen via RUI or RUN
 
 To build trainer, you need libartnet, ncurses. Simply configure, make, make install.
 
-Then build trainer:
+##Then build trainer:
 
 gcc -O2 trainer.c -lncurses -lartnet  -o trainer
 
-Build on Linux for win32 and win64:
+###Build on Linux for win32 and win64:
 
 get ncurses: ftp://invisible-island.net/ncurses/ncurses-6.0.tar.gz
 
 Configure:
 
-For win32:
+###For win32:
 
 ./configure --enable-term-driver --enable-sp-funcs --host=i686-w64-mingw32 --prefix=/home/vanous/bin/projects/c/win/win32/
 
-For win64:
+###For win64:
 
 /configure --enable-term-driver --enable-sp-funcs --host=x86_64-w64-mingw32 --prefix=/home/vanous/bin/projects/c/win/win64/
 
@@ -59,11 +59,13 @@ For win64:
 
 x86_64-w64-mingw32-gcc -O2 -v trainer.c -o trainer_w64.exe -std=gnu11 -I /home/vanous/bin/projects/c/win/win64/include/artnet/ -I /home/vanous/bin/projects/c/win/win64/include/ncurses/ /home/vanous/bin/projects/c/win/win64/lib/libartnet.a /home/vanous/bin/projects/c/win/win64/lib/libncurses.a
 
+##Binary releases:
+https://github.com/vanous/trainer/releases
 
 Serial library for windows comes from: https://github.com/waynix/SPinGW
 
 Obligatory screenshot:
 
-![trainer](https://cloud.githubusercontent.com/assets/3680926/10712981/aa143b58-7aab-11e5-9ca8-b8eb8b8094d7.png)
+![trainer](https://cloud.githubusercontent.com/assets/3680926/10994533/3f0ed888-8477-11e5-8948-1deddb98b092.png)
 
 
diff --git a/trainer.c b/trainer.c
index ca77483..1b43ee4 100644
--- a/trainer.c
+++ b/trainer.c
@@ -6,6 +6,7 @@
 #include <string.h>
 #include <fcntl.h>
 #ifndef WIN32
+#include <glob.h> //find /dev/files
 #include <termios.h>
 #include <sys/wait.h>
 #include <sys/time.h>
@@ -47,7 +48,7 @@ int fd=-1;
 	HANDLE h; //serial port
 #endif
 
-//#define ARTNET
+#define ARTNET
 //#define DEBUG 
 
 int calib[8][4]; // calibration values
@@ -67,10 +68,10 @@ DLF
 enum fixtures fixture = NONE;
 
 int serial_port;
-unsigned char serial_alias[20];
-char serial_name[20];
+unsigned char serial_alias[42]="...searching...";
+char serial_name[40];
 
-int uid; //is DEVICE detected?
+int uid=0; //is DEVICE detected?
 
 const char* fixtures_print[] = {
 "press c to configure fixture",
@@ -90,7 +91,8 @@ unsigned long tstart;
 unsigned long tend;
 unsigned long tallend;
 unsigned long t;
-
+int sum=0;
+int tsum=0;
 
 #ifndef DEBUG
 	int verbose = 0;
@@ -106,7 +108,7 @@ unsigned char dmx[512]; //dmx array
 
 
 //           program,step,values
-static int program[5][32][70]={
+static int program[5][32][78]={
 //first step is defining #of steps in program and delay time in ms for each step
 
 
@@ -149,37 +151,37 @@ static int program[5][32][70]={
 }
 ,
 {//DLS
-{30,40,40,40,10,40,10,10,40,10,10,40,10,10,40,10,40,10,40,10,10,40,10,10,40,10,40,10,40,10,40}, //number of steps, delay for each step
-{0,0,0,0,0,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//8000K WhitePoint ON (shutter off, 3sec)
-{0,0,0,0,0,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//RGBW mixing ON (shutter off, 3sec)
-{0,0,0,0,0,240,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//Theater mode OFF (3sec)
-{0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,560,561,562,563,0},//8000K calibration
-{0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,560,561,562,563,0},//SAVE calibrations
-{0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,560,561,562,563,0},//back to 0 
-{0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,520,521,522,523,0},//4200K calibration
-{0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,520,521,522,523,0},//SAVE calibrations
-{0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,520,521,522,523,0},//back to 0 
-{0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,510,511,512,513,0},//3200K calibration
-{0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,510,511,512,513,0},//SAVE calibrations
-{0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,510,511,512,513,0},//back to 0 
-{0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,500,501,502,503,0},//2700K calibration
-{0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,500,501,502,503,0},//SAVE calibrations
-{0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,500,501,502,503,0},//back to 0 
-{0,0,0,0,0,241,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//Theater mode ON (3sec)
-{0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,570,571,572,573,0},//8000K theater calibration
-{0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,570,571,572,573,0},//SAVE calibrations
-{0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,570,571,572,573,0},//back to 0 
-{0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,550,551,552,553,0},//5600K theater calibration
-{0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,550,551,552,553,0},//SAVE calibrations
-{0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,550,551,552,553,0},//back to 0 ,
-{0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,530,531,532,533,0},//4200K theater calibration,
-{0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,530,531,532,533,0},//SAVE calibrations
-{0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,530,531,532,533,0},//back to 0 
-{0,0,0,0,0,240,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//Theater mode OFF (3sec)
-{0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,540,541,542,543,0},//5600K calibration
-{0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,540,541,542,543,0},//SAVE calibrations
-{0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,540,541,542,543,0},//back to 0 
-{128,0,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}//end
+{30,40,40,40,10,20,10,10,20,10,10,20,10,10,20,10,40,10,20,10,10,20,10,10,20,10,40,10,20,10,40}, //number of steps, delay for each step
+{0,0,0,0,0,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//8000K WhitePoint ON (shutter off, 3sec)
+{0,0,0,0,0,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//RGBW mixing ON (shutter off, 3sec)
+{0,0,0,0,0,240,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//Theater mode OFF (3sec),
+{0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,560,561,562,563,0},//8000K calibration,
+{0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,560,561,562,563,0},//SAVE calibrations,
+{0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,560,561,562,563,0},//back to 0 ,
+{0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,520,521,522,523,0},//4200K calibration,
+{0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,520,521,522,523,0},//SAVE calibrations,
+{0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,520,521,522,523,0},//back to 0 ,
+{0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,510,511,512,513,0},//3200K calibration,
+{0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,510,511,512,513,0},//SAVE calibrations,
+{0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,510,511,512,513,0},//back to 0 ,
+{0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,500,501,502,503,0},//2700K calibration,
+{0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,500,501,502,503,0},//SAVE calibrations,
+{0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,500,501,502,503,0},//back to 0 ,
+{0,0,0,0,0,241,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//Theater mode ON (3sec),
+{0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,570,571,572,573,0},//8000K theater calibration,
+{0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,570,571,572,573,0},//SAVE calibrations,
+{0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,570,571,572,573,0},//back to 0 ,
+{0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,550,551,552,553,0},//5600K theater calibration,
+{0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,550,551,552,553,0},//SAVE calibrations,
+{0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,550,551,552,553,0},//back to 0 ,
+{0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,530,531,532,533,0},//4200K theater calibration,
+{0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,530,531,532,533,0},//SAVE calibrations,
+{0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,530,531,532,533,0},//back to 0 ,
+{0,0,0,0,0,240,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//Theater mode OFF (3sec),
+{0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,540,541,542,543,0},//5600K calibration,
+{0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,540,541,542,543,0},//SAVE calibrations,
+{0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,540,541,542,543,0},//back to 0 ,
+{128,0,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}//end,,
 },
 
 
@@ -220,9 +222,9 @@ static int program[5][32][70]={
 {
 {5,20,20,20,20,20},//number of steps, delay for each step
 {0,0},
-{128,0,128,0},
-{255,0,255,0},
-{128,0,128,0},
+{121,0,128,0},
+{254,0,255,0},
+{122,0,128,0},
 {0,0}
 }
 };
@@ -268,11 +270,11 @@ void dmxusb_open_port(char *serial_name){
 	}
 
 #else
-	printf("inside open port: %s",serial_name);
+	//printf("inside open port: %s",serial_name);
 	h = openSerialPort(serial_name,B19200,one,off);
 	//h = openSerialPort(serial_name,B9600,one,off);
 
-	Sleep(100);
+	//Sleep(100);
 #endif
 #ifndef WIN32
 		#ifdef DEBUG
@@ -404,15 +406,60 @@ return success;
 }
 
 
+
+void init_artnet()
+
+{
+
+  char *ip_addr = NULL;
+  int optc, subnet_addr = 0, port_addr = 0;
+  int bcast_limit = 0;
+  int an_sd;
+  /* set up artnet node */
+  node = artnet_new(ip_addr, verbose);;
+  
+  if(node == NULL) {
+	printf ("Unable to set up artnet node: %s\n", artnet_strerror() );
+ //return 1;
+  }
+
+  // set names and node type
+  artnet_set_short_name(node, "TRAINER");
+  artnet_set_long_name(node, "The calibRAtIoN submittER");
+  artnet_set_node_type(node, ARTNET_SRV);
+
+  artnet_set_subnet_addr(node, subnet_addr);
+
+  // enable the first input port (1 universe only)
+  artnet_set_port_type(node, 0, ARTNET_ENABLE_INPUT, ARTNET_PORT_DMX);
+  artnet_set_port_addr(node, 0, ARTNET_INPUT_PORT, port_addr);
+  artnet_set_bcast_limit(node, bcast_limit);
+
+  //start the node
+  //artnet_start(node);
+  if (artnet_start(node) != ARTNET_EOK) {
+    printf("Failed to start: %s\n", artnet_strerror() );
+    //goto error_destroy;
+//	return 1;
+  }
+
+  // store the sds
+  an_sd = artnet_get_sd(node); //all as per examples
+}
+
+
 void find_port(){
 
-int i=0;
+static int i=0; //port iterator
+
 
 #ifdef WIN32
-i=3;
+	#define ITER 100
+#else
+	#define ITER 1
 #endif
 
-for (i;i<255;i++){
+if ((i<ITER) && (!uid)){
 
 #ifdef WIN32
 	if (i<10){
@@ -420,53 +467,81 @@ for (i;i<255;i++){
 	}else{
 		sprintf(serial_name,"\\\\.\\COM%d",i);
 	}
-#else
-	sprintf(serial_name,"/dev/ttyUSB%d",i);
-#endif
 
-		printf("testing port %s\n",serial_name);
-	if (file_exist(serial_name))
-{
-		printf("opening port %s\n",serial_name);
+		printf(".");
+		//printf("opening port %s\n",serial_name);
 		dmxusb_open_port(serial_name);
 		uid=get_uid();
 		
-		if (uid){ //0 OK, 1 fail
-			printf("found port: %s\n", serial_name);
-			printf("found device: %s\n",serial_alias);
-			break;
+		if (uid){ //>0
+			#ifdef DEBUG
+				printf("\n");
+				printf("found port: %s\n", serial_name);
+				printf("found device: %s\n",serial_alias);
+			#endif
+			mvwprintw(w,14,1,"                                         ");
+			mvwprintw(w,14,1,"%s %s",uid ? serial_name:"", serial_alias);
+	//		break;
 		
 		}else{
-			printf("UID failed");
+			//printf("UID failed");
 		
 		}
+#else
+	
+	glob_t glob_result;
+	#ifdef __APPLE__
+		glob("/dev/cu.usbserial*",GLOB_TILDE,NULL,&glob_result);
+	#else
+		glob("/dev/ttyUSB*",GLOB_TILDE,NULL,&glob_result);
+	#endif
 
-		
-
-}else{
-
-#ifdef WIN32
-
-		printf("opening port %s\n",serial_name);
+printf("number of serial ports: %d\n",glob_result.gl_pathc);
+unsigned int j=0; 
+	while (j<glob_result.gl_pathc){ //iterate fast on UNIX as we have stat and can fail quickly
+	sprintf(serial_name,"%s",glob_result.gl_pathv[j]);
+	j++;
+	if (file_exist(serial_name))
+		{
+		//printf("opening port %s\n",serial_name);
 		dmxusb_open_port(serial_name);
 		uid=get_uid();
 		
-		if (uid){ //0 OK, 1 fail
-			printf("found port: %s\n", serial_name);
-			printf("found device: %s\n",serial_alias);
+		if (uid){ //>0
+			#ifdef DEBUG
+				printf("\n");
+				printf("found port: %s\n", serial_name);
+				printf("found device: %s\n",serial_alias);
+			#endif
+			mvwprintw(w,14,1,"                                         ");
+			mvwprintw(w,14,1,"%s %s",uid ? serial_name:"", serial_alias);
 			break;
 		
 		}else{
-			printf("UID failed");
+			//printf("UID failed");
 		
 		}
-#endif
-}
-
-
 
+		}
+	}
 
+#endif
+i++;	
+	}else{
+	if (!uid){ //uid should be 0 if no serial
+		#ifdef ARTNET
+			sprintf(serial_alias,"Art-Net Output enabled");
+			mvwprintw(w,14,1,"                                         ");
+			mvwprintw(w,14,1,"%s",serial_alias);
+			init_artnet();
+			uid=10;
+		#else
+			sprintf(serial_alias,"No DMX device found and Art-Net disabled");			
+			mvwprintw(w,14,1,"                                         ");
+			mvwprintw(w,14,1,"%s",serial_alias);
+		#endif
 	}
+}
 
 }
 
@@ -508,12 +583,11 @@ fixture=1;
 void fill_dmx()
 {
 //change DMX values - use values from our program and where needed, fill in calibration values from calib array
-
 for(a=0; a<512; a++)
 	{
-		if (a<70) //really only analyze first 70 channels of each DMX packet
+		if (a<78) //really only analyze first 70 channels of each DMX packet
 		{	
-		int cur_val=program[current_program][program_step][a]; //our program values. re-write them by calibration values where value is 500 - indicating the slot
+		int cur_val=program[current_program][current_step][a]; //our program values. re-write them by calibration values where value is 500 - indicating the slot
 		if (cur_val>499){
 			if (cur_val < 510)
 			{
@@ -568,7 +642,7 @@ for(a=0; a<512; a++)
 
 		}else{
 
-				dmx[a]=program[current_program][current_step+1][a]; //for other DMX slots, use the program values
+				dmx[a]=program[current_program][current_step][a]; //for other DMX slots, use the program values
 
 					}
 			
@@ -586,7 +660,7 @@ void init_calib(){
 		{
 		for (b=0;b<4;b++)
 		{
-		calib[a][b]=128;
+		calib[a][b]=255;
 //		calib[a][b]=sample;
 //		sample++;
 			}
@@ -597,6 +671,7 @@ void init_calib(){
 
 void get_input(int r,int c,char * str,int msg) //get user input for each calibration value
 {
+	nodelay(w,FALSE); //reenable getch
 	echo(); // print characters as typed
 	curs_set(2); // show cursor
 	mvwprintw(w,r+3,c+19+(c*4),"%s","      ");
@@ -645,6 +720,8 @@ void get_input(int r,int c,char * str,int msg) //get user input for each calibra
 
 	noecho();   //edit is over, set terminal back to non edit mode - catch single char in main loop
 	curs_set(0);
+	nodelay(w,TRUE); //reenable getch
+
 }
 
 void msleep(long time) {
@@ -686,18 +763,22 @@ if (current_program != 0) { //send DMX only if any program is active
 			tend=tstart+(int)(fadetime*100.0);
 			t=tstart;
 
-			float sum=0;
-
+			sum = 0;
 			for (int i = program_step; i < program_length+1; i++) {
 			   sum += program[current_program][0][i];
 				 }
 
 			tallend=tstart+(sum*100.0);
+			
+			if (current_step==1)
+				tsum=(int)sum;
+
 	}
-  if (t<=tend) {
+
+  if (t<=tend) { //not a new step, keep sending until time is up
     t=timeGetTime();
 
-    int final = (tallend-timeGetTime())/600;
+    int final = (tallend-timeGetTime())/100;
 	
 	if (final < 0)
 	{
@@ -705,19 +786,38 @@ if (current_program != 0) { //send DMX only if any program is active
 	}
 
 	//print program progress
-	mvwprintw(w,14,1,"%s, Step: %01d of %01d (Time %03d of %03d)", fixtures_print[fixture],current_step,program_length, (tend-timeGetTime())/60,final);
+
+//printf("pl: %d\n",program_length);
+//	move(14,0);
+//	attron(COLOR_PAIR(1));
+	//int percent=((tsum/6)-final-(tend-timeGetTime())/60)*100/(int)(tsum/6);
+	//int percent=((tsum/6)-final)*100/(int)(tsum/6);
+	int percent=((tsum)-final)*100/tsum;
+	//int percent=((tsum)-final);
+
+	//mvwprintw(w,14,1,"%s, Step %02d of %02d (Time %03d of %03d) %03i", fixtures_print[fixture],current_step,program_length, (tend-timeGetTime())/60,final,percent);
+	//mvwprintw(w,14,1,"%s, Step %02d of %02d (Time %03d of %03d) %03i", fixtures_print[fixture],current_step,program_length, tsum,final,percent);
+	mvwprintw(w,14,1,"%s, Step %02d of %02d                   %03i%%", fixtures_print[fixture],current_step,program_length,percent);
+
+
+	move(14,0.42*percent);
+	chgat(42, COLOR_PAIR(1), 0, NULL);
 		
 	  fill_dmx(); //fill in 
 	  msleep(40); //sleep why? (as per example from artnet libs)
 	  
 	  //send DMX
+		if (uid==10) { //10 is artnet identifier
 	  #ifdef ARTNET
 		if (artnet_send_dmx(node,0,MAXCHANNELS, dmx)){
 			printf("failed to send: %s\n", artnet_strerror() );
 		}
-	  #else
-		dmxusb_send_dmx(dmx,MAXCHANNELS);
 	  #endif
+		}else{
+		if(uid){
+		dmxusb_send_dmx(dmx,MAXCHANNELS);
+		}
+		}
 	  msleep(40); //sleep dtto
 
 
@@ -731,7 +831,7 @@ if (current_program != 0) { //send DMX only if any program is active
 		current_program=0;
 		program_step=0;
 		current_step=0;
-		nodelay(w,FALSE);
+		//nodelay(w,FALSE);
 	    mvwprintw(w,14,1,"Finished                                 ");
 		#ifndef ARTNET
 			dmxusb_mute_dmx();
@@ -819,56 +919,17 @@ void cleanup() { //on exit
 }
 
 
-
 int main()
 {
 
 
-  char *ip_addr = NULL;
-  int optc, subnet_addr = 0, port_addr = 0;
-  int bcast_limit = 0;
-  int an_sd;
-
-#ifdef ARTNET
-
-  /* set up artnet node */
-  node = artnet_new(ip_addr, verbose);;
-  
-  if(node == NULL) {
-	printf ("Unable to set up artnet node: %s\n", artnet_strerror() );
- return 1;
-  }
-
-  // set names and node type
-  artnet_set_short_name(node, "TRAINER");
-  artnet_set_long_name(node, "The calibRAtIoN submittER");
-  artnet_set_node_type(node, ARTNET_SRV);
-
-  artnet_set_subnet_addr(node, subnet_addr);
 
-  // enable the first input port (1 universe only)
-  artnet_set_port_type(node, 0, ARTNET_ENABLE_INPUT, ARTNET_PORT_DMX);
-  artnet_set_port_addr(node, 0, ARTNET_INPUT_PORT, port_addr);
-  artnet_set_bcast_limit(node, bcast_limit);
-
-  //start the node
-  //artnet_start(node);
-  if (artnet_start(node) != ARTNET_EOK) {
-    printf("Failed to start: %s\n", artnet_strerror() );
-    //goto error_destroy;
-	return 1;
-  }
-
-  // store the sds
-  an_sd = artnet_get_sd(node); //all as per examples
-#else
 
+	find_port();
 	//dmxusb_open_port("\\\\.\\COM35");
 	//get_uid();
 	//mvwprintw(w,18,1,"hledam port");
-	find_port();
 
-#endif
 
 	int c = 0;
 	char strr[3];
@@ -888,15 +949,14 @@ int main()
 	raw();
 	keypad(w, TRUE);
 	mousemask(ALL_MOUSE_EVENTS, NULL); //accept mouse events
-
+	//cbreak();
 	MEVENT event;
 	init_calib(); //fill calibrations with 128s
 	draw_screen();//draw UI
 	char e=' ';
-	#ifdef ARTNET
-		sprintf(serial_alias,"Art-Net");
-	#endif
-
+	
+	//nodelay(w,TRUE);
+	timeout(50); //prevent 100% cpu usage during idle loop
 	mvwprintw(w,14,1,"                                         ");
 	mvwprintw(w,14,1,"%s %s",uid ? serial_name:"", serial_alias);
 		/* main loop */
@@ -932,9 +992,9 @@ int main()
 								get_input(menu_r,menu_c,strr,calib[menu_r][menu_c]);
 						} else if ((event.x>11) && (event.x<18)){ //run
 							if (fixture){
-								nodelay(w,TRUE);
+								//nodelay(w,TRUE);
 								current_program=fixture;
-								program_step=0;
+								program_step=1;
 								current_step=-1;
 								program_length=program[current_program][0][0];
 							}else{ //fixture not selected, show error
@@ -943,10 +1003,10 @@ int main()
 							}
 						} else if ((event.x>18) && (event.x<26)){ //test
 							if (fixture){
-								nodelay(w,TRUE);
+								//nodelay(w,TRUE);
 								current_program=4;
-								current_step=0;
-								program_step=-1;
+								current_step=-1;
+								program_step=1;
 								program_length=program[current_program][0][0];
 							}else{ //fixture not selected, show error
 							
@@ -955,8 +1015,8 @@ int main()
 						} else if ((event.x>26) && (event.x<34)){ //stop
 							current_program=0;
 							current_step=-1;
-							program_step=0;
-							nodelay(w,FALSE); //reenable getch
+							program_step=1;
+							//nodelay(w,FALSE); //reenable getch
 							//mvwprintw(w,14,1,"Stopped                                  ");
 						} else if ((event.x>34) && (event.x<42)){
 							return 0;
@@ -1018,7 +1078,7 @@ int main()
 			  break;
 
 			  case 'c': //enter
-					if (program_step==0){
+					if (current_program==0){
 					conf();
 						}
 					mvwprintw(w,14,1,"                                         ");
@@ -1032,15 +1092,15 @@ int main()
 					//setall();
 					current_program=0;
 					current_step=-1;
-					program_step=0;
-					nodelay(w,FALSE); //reenable getch
+					program_step=1;
+					//nodelay(w,FALSE); //reenable getch
 	    			//mvwprintw(w,14,1,"Stopped                                  ");
 					break;
 			  case 't': //run test program
 					if (fixture){
-					nodelay(w,TRUE);//disable getch while running
+					//nodelay(w,TRUE);//disable getch while running
 					current_program=4;
-					program_step=0;
+					program_step=1;
 					current_step=-1;
 					program_length=program[current_program][0][0];
 					}else{ //fixture not selected, show error
@@ -1049,9 +1109,9 @@ int main()
 					break;
 			  case 'r': //run
 					if (fixture){
-					nodelay(w,TRUE);
+					//nodelay(w,TRUE);
 					current_program=fixture;
-					program_step=0;
+					program_step=1;
 					current_step=-1;
 					program_length=program[current_program][0][0];
 					}else{ //fixture not selected, show error
@@ -1064,7 +1124,7 @@ int main()
 						break;
 
 					}
-					
+			find_port();				
 			draw_screen(); //draw screen UI each loop after user input
 			do_step(); //send DMX loop
 			refresh();     //refresh screen
